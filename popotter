#!/usr/bin/env python3
from requests_oauthlib import OAuth1Session

from const import CONSUMER_KEY
from const import CONSUMER_SECRET
from loader import LoadSettings
from loader import LoadUsersData

import readline
import os
import argparse

usersdata = LoadUsersData()

api = None

parser = argparse.ArgumentParser()
parser.add_argument('--post', '-p', metavar='TEXT', type=str, nargs='+')
parser.add_argument('--file', '-f', metavar='FILENAME', type=str, nargs='+')

group = parser.add_mutually_exclusive_group()
group.add_argument('--userid', '-i', metavar='USERID', type=int, 
                   nargs=1, default=[0])
group.add_argument('--name', '-n', metavar='USERNAME', type=str,
                   nargs=1, default=None)
group.add_argument('--listusernames', '-l', action='store_true')
group.add_argument('--adduser', action='store_true')

settings = LoadSettings()

def AddNewUser():
  REQUEST_TOKEN_URL = 'https://api.twitter.com/oauth/request_token'
  BASE_AUTHORIZATION_URL = 'https://api.twitter.com/oauth/authorize'
  ACCESS_TOKEN_URL = 'https://api.twitter.com/oauth/access_token'
  api = OAuth1Session(CONSUMER_KEY, CONSUMER_SECRET)
  fetch_response = api.fetch_request_token(REQUEST_TOKEN_URL)
  access_token = fetch_response.get('oauth_token')
  access_key_secret = fetch_response.get('oauth_token_secret')
  authorization_url = api.authorization_url(BASE_AUTHORIZATION_URL)
  print('Please access the following URL and authorize the app.')
  print('  {url}'.format(url=authorization_url))
  print('Please input PIN code.')
  verifier = input('  PIN: ')
  api = OAuth1Session(CONSUMER_KEY, CONSUMER_SECRET,
                      access_token, access_key_secret,
                      verifier=verifier)
  oauth_tokens = api.fetch_access_token(ACCESS_TOKEN_URL)
  name = oauth_tokens['screen_name']
  access_token = oauth_tokens['oauth_token']
  access_token_secret = oauth_tokens['oauth_token_secret']

  path_to_usersdata = os.environ.get('HOME') + '/.popotter.users'
  users_data = open(path_to_usersdata, 'a')
  users_data.write('{name},{access_token},{access_token_secret}\n'
                  .format(name=name,
                          access_token=access_token,
                          access_token_secret=access_token_secret))
  users_data.close()

def DivideTweetIfTooLong(tweet):
  CONT_POST_STR = settings['CONT_POST_STR']
  CONT_PRE_STR = settings['CONT_PRE_STR']
  ENABLE_PRE_STR_IN_FIRST_TW = settings['ENABLE_PRE_STR_IN_FIRST_TW']
  ENABLE_PRE_STR_IN_LAST_TW = settings['ENABLE_PRE_STR_IN_LAST_TW']
  ENABLE_POST_STR_IN_FIRST_TW = settings['ENABLE_POST_STR_IN_FIRST_TW']
  ENABLE_POST_STR_IN_LAST_TW = settings['ENABLE_POST_STR_IN_LAST_TW']
  first_tw_fmt = ''
  last_tw_fmt = ''
  if ENABLE_PRE_STR_IN_FIRST_TW == '1':
    first_tw_fmt += '{pre}'
  first_tw_fmt += '{str}'
  if ENABLE_POST_STR_IN_FIRST_TW == '1':
    first_tw_fmt += '{post}'

  middle_tw_fmt = '{pre}{str}{post}'

  if ENABLE_PRE_STR_IN_LAST_TW == '1':
    last_tw_fmt += '{pre}'
  last_tw_fmt += '{str}'
  if ENABLE_POST_STR_IN_LAST_TW == '1':
    last_tw_fmt += '{post}'

  devided_tweets = []
  last_tw = False
  if len(tweet) <= 140:
    return [tweet]
  else:
    i = 1
    while True:
      if i == 1:
        current_format = first_tw_fmt
      else:
        current_format = middle_tw_fmt

      len_append_str = len(current_format.format(pre=CONT_PRE_STR,
                                                 str='',
                                                 post=CONT_POST_STR)
                                                 .format(i=i, prei=i-1))

      if len(tweet) <= 140-len_append_str:
        last_tw = True
        current_format = last_tw_fmt
      current_str = current_format.format(pre=CONT_PRE_STR,
                                          str=tweet[0:140-len_append_str],
                                          post=CONT_POST_STR)\
                                          .format(i=i, prei=i-1)
      devided_tweets.append(current_str)
      if last_tw == True:
        break
      else:
        tweet = tweet[140-len_append_str:]
      i += 1

  return devided_tweets
    
def PostTweet(tweet):
  global api
  devided_tweets = DivideTweetIfTooLong(tweet)
  URL = 'https://api.twitter.com/1.1/statuses/update.json'
  for current_str in devided_tweets:
    params = {'status': current_str}
    ret = api.post(URL, params = params)

def ReadPostFromFile(path_to_file):
  if os.path.isfile(path_to_file):
    f = open(path_to_file, 'r')
    return f.read()
  else:
    return None

def InteractiveMode(name):
  print('Current Account: {name}'.format(name=name))
  print('Ctrl + D on a blank line to exit.')
  while True:
    try:
      tweet = input('Tweet> ')
      PostTweet(tweet)
    except EOFError:
      print('\nGood bye.')
      break
    except KeyboardInterrupt:
      print('')
      continue

def ListingUsers():
  global usersdata
  print('Users:')
  i = 0
  while i < len(usersdata):
    print(' {id:<2} {username}'.format(id=i, username=usersdata[i][0]))
    i += 1
  return True

def GetUserIDfromUserName(username):
  i = 0
  while i < len(usersdata):
    if usersdata[i][0] == username:
      userid = i
      return i
    i += 1
  return None

def main():
  global parser
  global api
  global usersdata
  args = parser.parse_args()

  if args.adduser == True or usersdata == None:
    AddNewUser()
    return True

  if args.listusernames == True:
    ListingUsers()
    return True

  if args.name == None:
    userid = args.userid[0]
    if userid > len(usersdata) - 1:
      print('Invalid UserID.')
      return False
  else:
    userid = GetUserIDfromUserName(args.name[0])
    if userid == None:
      print('Invalid User Name.')
      return False

  (name, access_token, access_token_secret) = usersdata[userid]
  api = OAuth1Session(CONSUMER_KEY, CONSUMER_SECRET,
                      access_token, access_token_secret)

  if args.post == None:
    if args.file == None:
      InteractiveMode(name=name)
    else:
      for filename in args.file:
        tweet = ReadPostFromFile(filename)
        if tweet == None:
          print('File "{filename}" does not exit! Pass it.'
                  .format(filename=filename))
        else:
          PostTweet(tweet)
  else:
    for tweet in args.post:
      PostTweet(tweet)



if __name__ == '__main__':
  main()
